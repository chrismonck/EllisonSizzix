//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MagentoTest.NavMagFunctions {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MagentoFunctions_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions")]
    public partial class MagentoFunctions : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCustomerIdByEcomIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfItemExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResyncProdIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAssemblyComponentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssemblyOrderNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadInventoryLevelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBlankLinesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MagentoFunctions() {
            this.Url = global::MagentoTest.Properties.Settings.Default.MagentoTest_NavMagFunctions_MagentoFunctions;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCustomerIdByEcomIDCompletedEventHandler GetCustomerIdByEcomIDCompleted;
        
        /// <remarks/>
        public event CheckIfItemExistsCompletedEventHandler CheckIfItemExistsCompleted;
        
        /// <remarks/>
        public event DownloadOrdersCompletedEventHandler DownloadOrdersCompleted;
        
        /// <remarks/>
        public event UploadCustomersCompletedEventHandler UploadCustomersCompleted;
        
        /// <remarks/>
        public event UploadItemsCompletedEventHandler UploadItemsCompleted;
        
        /// <remarks/>
        public event ResyncProdIDsCompletedEventHandler ResyncProdIDsCompleted;
        
        /// <remarks/>
        public event GetSessionIDCompletedEventHandler GetSessionIDCompleted;
        
        /// <remarks/>
        public event SetAssemblyComponentCompletedEventHandler SetAssemblyComponentCompleted;
        
        /// <remarks/>
        public event GetAssemblyOrderNoCompletedEventHandler GetAssemblyOrderNoCompleted;
        
        /// <remarks/>
        public event UploadInventoryLevelsCompletedEventHandler UploadInventoryLevelsCompleted;
        
        /// <remarks/>
        public event DeleteBlankLinesCompletedEventHandler DeleteBlankLinesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:GetCustomerIdByEcomID", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="GetCustomerIdByEcomID_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetCustomerIdByEcomID(string eID) {
            object[] results = this.Invoke("GetCustomerIdByEcomID", new object[] {
                        eID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerIdByEcomIDAsync(string eID) {
            this.GetCustomerIdByEcomIDAsync(eID, null);
        }
        
        /// <remarks/>
        public void GetCustomerIdByEcomIDAsync(string eID, object userState) {
            if ((this.GetCustomerIdByEcomIDOperationCompleted == null)) {
                this.GetCustomerIdByEcomIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerIdByEcomIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerIdByEcomID", new object[] {
                        eID}, this.GetCustomerIdByEcomIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerIdByEcomIDOperationCompleted(object arg) {
            if ((this.GetCustomerIdByEcomIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerIdByEcomIDCompleted(this, new GetCustomerIdByEcomIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:CheckIfItemExists", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="CheckIfItemExists_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string CheckIfItemExists(string itemNo, string ecommID, string itemDescrip, bool bAssemblyToOrder, string variantID) {
            object[] results = this.Invoke("CheckIfItemExists", new object[] {
                        itemNo,
                        ecommID,
                        itemDescrip,
                        bAssemblyToOrder,
                        variantID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfItemExistsAsync(string itemNo, string ecommID, string itemDescrip, bool bAssemblyToOrder, string variantID) {
            this.CheckIfItemExistsAsync(itemNo, ecommID, itemDescrip, bAssemblyToOrder, variantID, null);
        }
        
        /// <remarks/>
        public void CheckIfItemExistsAsync(string itemNo, string ecommID, string itemDescrip, bool bAssemblyToOrder, string variantID, object userState) {
            if ((this.CheckIfItemExistsOperationCompleted == null)) {
                this.CheckIfItemExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfItemExistsOperationCompleted);
            }
            this.InvokeAsync("CheckIfItemExists", new object[] {
                        itemNo,
                        ecommID,
                        itemDescrip,
                        bAssemblyToOrder,
                        variantID}, this.CheckIfItemExistsOperationCompleted, userState);
        }
        
        private void OnCheckIfItemExistsOperationCompleted(object arg) {
            if ((this.CheckIfItemExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfItemExistsCompleted(this, new CheckIfItemExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:DownloadOrders", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="DownloadOrders_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DownloadOrders() {
            this.Invoke("DownloadOrders", new object[0]);
        }
        
        /// <remarks/>
        public void DownloadOrdersAsync() {
            this.DownloadOrdersAsync(null);
        }
        
        /// <remarks/>
        public void DownloadOrdersAsync(object userState) {
            if ((this.DownloadOrdersOperationCompleted == null)) {
                this.DownloadOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadOrdersOperationCompleted);
            }
            this.InvokeAsync("DownloadOrders", new object[0], this.DownloadOrdersOperationCompleted, userState);
        }
        
        private void OnDownloadOrdersOperationCompleted(object arg) {
            if ((this.DownloadOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadOrdersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:UploadCustomers", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="UploadCustomers_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCustomers() {
            this.Invoke("UploadCustomers", new object[0]);
        }
        
        /// <remarks/>
        public void UploadCustomersAsync() {
            this.UploadCustomersAsync(null);
        }
        
        /// <remarks/>
        public void UploadCustomersAsync(object userState) {
            if ((this.UploadCustomersOperationCompleted == null)) {
                this.UploadCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCustomersOperationCompleted);
            }
            this.InvokeAsync("UploadCustomers", new object[0], this.UploadCustomersOperationCompleted, userState);
        }
        
        private void OnUploadCustomersOperationCompleted(object arg) {
            if ((this.UploadCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCustomersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:UploadItems", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="UploadItems_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadItems() {
            this.Invoke("UploadItems", new object[0]);
        }
        
        /// <remarks/>
        public void UploadItemsAsync() {
            this.UploadItemsAsync(null);
        }
        
        /// <remarks/>
        public void UploadItemsAsync(object userState) {
            if ((this.UploadItemsOperationCompleted == null)) {
                this.UploadItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadItemsOperationCompleted);
            }
            this.InvokeAsync("UploadItems", new object[0], this.UploadItemsOperationCompleted, userState);
        }
        
        private void OnUploadItemsOperationCompleted(object arg) {
            if ((this.UploadItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:ResyncProdIDs", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="ResyncProdIDs_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResyncProdIDs() {
            this.Invoke("ResyncProdIDs", new object[0]);
        }
        
        /// <remarks/>
        public void ResyncProdIDsAsync() {
            this.ResyncProdIDsAsync(null);
        }
        
        /// <remarks/>
        public void ResyncProdIDsAsync(object userState) {
            if ((this.ResyncProdIDsOperationCompleted == null)) {
                this.ResyncProdIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResyncProdIDsOperationCompleted);
            }
            this.InvokeAsync("ResyncProdIDs", new object[0], this.ResyncProdIDsOperationCompleted, userState);
        }
        
        private void OnResyncProdIDsOperationCompleted(object arg) {
            if ((this.ResyncProdIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResyncProdIDsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:GetSessionID", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="GetSessionID_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSessionID() {
            this.Invoke("GetSessionID", new object[0]);
        }
        
        /// <remarks/>
        public void GetSessionIDAsync() {
            this.GetSessionIDAsync(null);
        }
        
        /// <remarks/>
        public void GetSessionIDAsync(object userState) {
            if ((this.GetSessionIDOperationCompleted == null)) {
                this.GetSessionIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionIDOperationCompleted);
            }
            this.InvokeAsync("GetSessionID", new object[0], this.GetSessionIDOperationCompleted, userState);
        }
        
        private void OnGetSessionIDOperationCompleted(object arg) {
            if ((this.GetSessionIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:SetAssemblyComponent", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="SetAssemblyComponent_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool SetAssemblyComponent(string assemblyOrderNo, string itemNo, decimal qty, string descrip, string ecommerceID, string variantID) {
            object[] results = this.Invoke("SetAssemblyComponent", new object[] {
                        assemblyOrderNo,
                        itemNo,
                        qty,
                        descrip,
                        ecommerceID,
                        variantID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAssemblyComponentAsync(string assemblyOrderNo, string itemNo, decimal qty, string descrip, string ecommerceID, string variantID) {
            this.SetAssemblyComponentAsync(assemblyOrderNo, itemNo, qty, descrip, ecommerceID, variantID, null);
        }
        
        /// <remarks/>
        public void SetAssemblyComponentAsync(string assemblyOrderNo, string itemNo, decimal qty, string descrip, string ecommerceID, string variantID, object userState) {
            if ((this.SetAssemblyComponentOperationCompleted == null)) {
                this.SetAssemblyComponentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAssemblyComponentOperationCompleted);
            }
            this.InvokeAsync("SetAssemblyComponent", new object[] {
                        assemblyOrderNo,
                        itemNo,
                        qty,
                        descrip,
                        ecommerceID,
                        variantID}, this.SetAssemblyComponentOperationCompleted, userState);
        }
        
        private void OnSetAssemblyComponentOperationCompleted(object arg) {
            if ((this.SetAssemblyComponentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAssemblyComponentCompleted(this, new SetAssemblyComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:GetAssemblyOrderNo", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="GetAssemblyOrderNo_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetAssemblyOrderNo(string salesOrderNo, int salesLineNo) {
            object[] results = this.Invoke("GetAssemblyOrderNo", new object[] {
                        salesOrderNo,
                        salesLineNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssemblyOrderNoAsync(string salesOrderNo, int salesLineNo) {
            this.GetAssemblyOrderNoAsync(salesOrderNo, salesLineNo, null);
        }
        
        /// <remarks/>
        public void GetAssemblyOrderNoAsync(string salesOrderNo, int salesLineNo, object userState) {
            if ((this.GetAssemblyOrderNoOperationCompleted == null)) {
                this.GetAssemblyOrderNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssemblyOrderNoOperationCompleted);
            }
            this.InvokeAsync("GetAssemblyOrderNo", new object[] {
                        salesOrderNo,
                        salesLineNo}, this.GetAssemblyOrderNoOperationCompleted, userState);
        }
        
        private void OnGetAssemblyOrderNoOperationCompleted(object arg) {
            if ((this.GetAssemblyOrderNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssemblyOrderNoCompleted(this, new GetAssemblyOrderNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:UploadInventoryLevels", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="UploadInventoryLevels_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadInventoryLevels() {
            this.Invoke("UploadInventoryLevels", new object[0]);
        }
        
        /// <remarks/>
        public void UploadInventoryLevelsAsync() {
            this.UploadInventoryLevelsAsync(null);
        }
        
        /// <remarks/>
        public void UploadInventoryLevelsAsync(object userState) {
            if ((this.UploadInventoryLevelsOperationCompleted == null)) {
                this.UploadInventoryLevelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadInventoryLevelsOperationCompleted);
            }
            this.InvokeAsync("UploadInventoryLevels", new object[0], this.UploadInventoryLevelsOperationCompleted, userState);
        }
        
        private void OnUploadInventoryLevelsOperationCompleted(object arg) {
            if ((this.UploadInventoryLevelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadInventoryLevelsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions:DeleteBlankLines", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", ResponseElementName="DeleteBlankLines_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/MagentoFunctions", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteBlankLines(string salesOrderNo) {
            this.Invoke("DeleteBlankLines", new object[] {
                        salesOrderNo});
        }
        
        /// <remarks/>
        public void DeleteBlankLinesAsync(string salesOrderNo) {
            this.DeleteBlankLinesAsync(salesOrderNo, null);
        }
        
        /// <remarks/>
        public void DeleteBlankLinesAsync(string salesOrderNo, object userState) {
            if ((this.DeleteBlankLinesOperationCompleted == null)) {
                this.DeleteBlankLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBlankLinesOperationCompleted);
            }
            this.InvokeAsync("DeleteBlankLines", new object[] {
                        salesOrderNo}, this.DeleteBlankLinesOperationCompleted, userState);
        }
        
        private void OnDeleteBlankLinesOperationCompleted(object arg) {
            if ((this.DeleteBlankLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBlankLinesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCustomerIdByEcomIDCompletedEventHandler(object sender, GetCustomerIdByEcomIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerIdByEcomIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerIdByEcomIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckIfItemExistsCompletedEventHandler(object sender, CheckIfItemExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfItemExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfItemExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DownloadOrdersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadCustomersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadItemsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ResyncProdIDsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSessionIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetAssemblyComponentCompletedEventHandler(object sender, SetAssemblyComponentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAssemblyComponentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAssemblyComponentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAssemblyOrderNoCompletedEventHandler(object sender, GetAssemblyOrderNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssemblyOrderNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssemblyOrderNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadInventoryLevelsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteBlankLinesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591